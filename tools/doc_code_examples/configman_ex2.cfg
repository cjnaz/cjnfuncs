# configman_ex2.cfg 

# Demonstrating:
#   Logging control params
#   Param naming, Separators, Value types
#   Multi-line values
#   Sections, Defaults
#   Imports


# Logging setups
# **** NOTE 1
LogLevel=       20                              # Logging module levels: 10:DEBUG, 20:INFO, 30:WARNING (default), 40:ERROR, 50:CRITICAL
LogFile         configman_ex2.log               # Full path, or relative to core.tool.log_dir_base


# Example param definitions - name-value pairs separated by whitespace, '=', or ':'
# **** NOTE 2, **** NOTE 3
# All valid chars, except the separators, are allowed in a param name.
# A param name cannot start with '[', which starts a section name.
Im_tall!        True                            # Whitespace separator between name-value
Test.Bool       false                           # '.' is not special.  True and false values not case sensitive, stored as bools
No_Value_bool                                   # Param with no value becomes a True boolean
7893&(%$,.nasf||\a@=Hello                       # '=' separator, with or without whitespace
again:true                                      # ':' separator, with or without whitespace
a_str     =     6 * 7                           # configman does not support calculations, so this is loaded as a str
a_quoted_str =  "Value stored without the quotes" # equivalent to unquoted string
a_int           7
a_bool    :     false                           # True and false values not case sensitive, stored as bools
a_float         42.0
a_float_as_str  '42.0'                          # Force load as str
    a_list:     ["hello", 3.14, {"abc":42.}]    # Indentation (leading whitespace) is allowed, and ignored
    a_dict:     {"six":6, 3:3.0, 'pi':3.14}
    a_tuple=    ("Im a tuple", 7.0)


# Values may span multiple lines by using the '\' continuation character
multi_line_list = ['hello',   \                 # continuation line with discarded comment
    'goodbye',  \
\   # Full-line comment discarded.  Continuation character on each line.
\
                'another line', 5, True\        # Whitespace before/after continuation char is discarded
                ]
multi_line_str : Generally, \
    don't use quotes \
    within multi-line strings.\
    Check results carefully.


# Sections are supported
# **** NOTE 3, **** NOTE 4
[ Bad params ]              # Embedded whitespace retained, leading and trailing whitespace is trimmed off
# If loadconfig() can't parse the value as a int/bool/float/list/dict/tuple, then the param is loaded as a str
# Strings within list/dict/tuple must be quoted.
# All of these are loaded as strings:
bad_list        ["hello", 3.14 {"abc":42.}]     # Missing comma
bad_tuple=      (Im a tuple, 7.0)               # String <Im a tuple> missing quotes
bad_dict:       {"six":6, 3:3.0, milk:3}        # String <milk> missing quotes
bad_float       52.3.5                          # Not a valid float


# The [DEFAULT] section can be declared.  Multiple [DEFAULT] sections are merged.
# **** NOTE 5
[DEFAULT]
my_def_param    my_def_value


# Section name "[]" resets to the top-level section.  Nested sections are NOT supported.
# Any section may be re-opened for adding more params.  loadconfig() merges all params for the given section.
[  ]                                            # Leading/trailing whitespace is trimmed, so equivalent to []
more_top_level  George was here                 # Strings NOT in list/dict/tuple need not be quoted, but may be.
another_str     """The original George Tirebiter was a dog in Maine"""


# More DEFAULTs
[ DEFAULT ]
another_def     false


# The SMTP section is used by the cjnfuncs.SMTP module
[SMTP]                                          # comment
NotifList       4809991234@vzwpix.com

# Import definitions within the referenced file into the current section ([SMTP] in this case)
# **** NOTE 6
import          creds_SMTP


# Back to the top-level
[]
another_top_level   It's only a flesh wound!
